name: ESP32 S3 MicroPython

permissions:
  contents: write

on:
  push:
    tags:
     - 'v*'
  schedule:
     - cron: '0 0 * * 0'
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Clonar el repositorio
      uses: actions/checkout@v4
      
    - name: Clonar Micropython
      run: git clone --recurse-submodules https://github.com/micropython/micropython.git
      
    - name: Instalar dependencias
      run: |
       sudo apt update
       sudo apt install -y build-essential git wget flex bison gperf pkg-config python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0

    - name: Clonar ESP-IDF
      run: |
        mkdir -p esp
        cd esp
        git clone -b v5.4.2 --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf/tools
        python3 idf_tools.py install cmake
        cd ..
        ./install.sh esp32s3
        cd


    - name: Copiar configuracion
      run: |
        cp -r ESP32_GENERIC_S3_N16R8 micropython/ports/esp32/boards/
    
    - name: Copiar tabla de particiones personalizada
      run: |
        cp "$GITHUB_WORKSPACE/ESP32_GENERIC_S3_N16R8/partitions-16MiB.csv" "$GITHUB_WORKSPACE/micropython/ports/esp32/partitions-16MiB.csv"


    - name: Compilar
      run: |
        source esp/esp-idf/export.sh
        cd micropython/
        make -C mpy-cross
        export IDF_TARGET=esp32s3
        cd ports/esp32/
        idf.py -D MICROPY_BOARD=ESP32_GENERIC_S3_N16R8 -D MICROPY_BOARD_DIR="$GITHUB_WORKSPACE/micropython/ports/esp32/boards/ESP32_GENERIC_S3_N16R8" -B build-ESP32_GENERIC_S3_N16R8 build

    
    - name: Mover binarios
      run: |
        mkdir -p ./artifacts
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/micropython.bin ./artifacts/
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/bootloader/bootloader.bin ./artifacts/
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/partition_table/partition-table.bin ./artifacts/

    - name: Get MicroPython Version from mpconfig.h
      run: |
        cd micropython/
        MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
        MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
        MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
        PRERELEASE=$(grep -oP '(?<=#define MICROPY_VERSION_PRERELEASE )[0-9]+' py/mpconfig.h)

        if [ "$PRERELEASE" -eq 1 ]; then
          MPY_VERSION="$MAJOR.$MINOR.$MICRO-preview"
        else
          MPY_VERSION="$MAJOR.$MINOR.$MICRO"
        fi

        echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV
        
    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

    - name: GH Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "MicroPython for ESP32 S3 Release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        body: |
          Automated release for MicroPython.
          - What we get here:
             - ```micropython.bin, bootloader.bin and partition-table.bin are MicroPython itslef by default, without SmartConfig module.```
          
          # Instructions
          
          You need to have some dependencies pre-instaled in your OS:
          - Python 3
          - Pip
          - Python VENV
          
          ## Windows:
          ````bash
          python -m venv esp-env
          ````
          
          ````bash
          .\esp-env\Scripts\activate
          ````
          
          or
          
          ````bash
          py -m venv esp-env
          ````
          
          ````bash
          .\esp-env\Scripts\activate
          ````
          
          ### Then install esptool:
          ````bash
          pip install esptool
          ````
          
          ### Put ESP32 S3 in BOOTLOADER MODE:
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          
          ### Erase and Flash:
          #### Step for MicroPython.
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32s3 -b 460800 --before default_reset --after no_reset write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
          ````
                    
          ## Linux:
          
          ````bash
          python -m venv esp-env
          ````
          
          ````bash
          source esp-env/bin/activate
          ````
          
          ### Then install esptool:
          ````bash
          pip install esptool
          ````
          
          ### Put ESP32 S3 in BOOTLOADER MODE:
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          
          ### Erase and Flash:
          #### Step for MicroPython:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32s3 -b 460800 --before default_reset --after no_reset write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
          ````
          
        draft: false
        prerelease: false
        files: ./artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
